---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: validate-gitflow-pr
spec:
  description: Ensure the pull request is valid using GitFlow conventions
  params:
    - name: head
      description: Head branch name (i.e. feature/xxx, hotfix/xxx, doc/xxx)
      type: string
    - name: base 
      description: Base branch name (i.e. main, develop, staging)
      type: string
    - name: python-image
      description: The docker image with python
      type: string
  stepTemplate:
    image: $(params.python-image)
    env:
      - name: HEAD
        value: $(params.head)
      - name: BASE
        value: $(params.base)
  results:  # passes on to other tasks
    - name: branch-type
      description: feature, release, develop, doc, documentation, hotfix
    - name: build-version
      description: 0.1.0, 0.2.3, nia-912
    - name: build-extension
      description: -rc or blank. Used for git and image tags
  steps:
    - name: verify-branch-name
      script: | 
        #!/usr/bin/env python3
        """Ensure GitFlow head names are valid before considering for merging."""
        import logging
        import os
        import re
        import sys

        JIRA_PREFIX = 'NIA'
        VALID_HEAD_BRANCHES = ['hotfix', 'release', 'develop', 'feature',
                               'doc', 'documentation']
        BRANCHES_SEMVER = ['hotfix', 'release']
        BRANCHES_FEATUREVER = ['doc', 'documentation', 'feature']


        FATAL_EMPTY_BRANCHNAME = 1
        FATAL_INVALID_VERSIONING = 2
        FATAL_INVALID_HEADNAME = 3

        def set_logging():
            handler = logging.StreamHandler(sys.stdout)
            handler.setLevel(logging.ERROR)
            logger = logging.getLogger()
            logger.addHandler(handler)
            return logger


        def die_horribly(logger, branch, exit_code):
            messages = {
              FATAL_EMPTY_BRANCHNAME: 'has no name',
              FATAL_INVALID_HEADNAME: 'invalid branch name',
              FATAL_INVALID_VERSIONING: 'invalid version in branch name'
            }
            logger.fatal(f"git branch {branch} {messages[exit_code]}")
            sys.exit(exit_code)


        logger = set_logging()

        head = os.getenv('HEAD')
        if head is None:
            die_horribly(logger, '', FATAL_EMPTY_BRANCHNAME)

        branch_type = head.split('/')[0]  # feature/NIA-293
        if branch_type not in VALID_HEAD_BRANCHES:
            branch_type = head.split('-')[0]  # release-0.1.0
        if branch_type not in VALID_HEAD_BRANCHES:
            die_horribly(logger, branch_type, FATAL_INVALID_HEADNAME)

        re_semver = re.compile(r'\d+\.\d+\.\d+')
        re_featurever = re.compile(JIRA_PREFIX + r'-\d+')
        if branch_type in BRANCHES_SEMVER:
            version = head.split('-')[1]
            if re_semver.match(version) is None:
                die_horribly(logger, branch, FATAL_INVALID_VERSIONING)
        elif branch_type in BRANCHES_FEATUREVER:
            version = head.split('/')[1]
            if re_featurever.match(version) is None:
                die_horribly(logger, branch, FATAL_INVALID_VERSIONING)

        # Make branch type and version available to other tasks
        if branch_type == 'release':
            build_extension = '-rc1'
        else:
            build_extension = ''

        f = open('$(results.branch-type.path)', 'w')
        f.write(branch_type)
        f.close()

        f = open('$(results.build-version.path)', 'w')
        f.write(version)
        f.close()

        f = open('$(results.build-extension.path)', 'w')
        f.write(build_extension)
        f.close()

        

    - name: verify-gitflow
      script: |
        #!/usr/bin/env python3
        """Ensure GitFlow is followed before the PR is even considered for merging."""
        import logging
        import os
        import re
        import sys

        # The branches (values) are permitted to flow into the base branches
        # (keys).
        VALID_WORKFLOWS = {
          'PUSH-NOBASE': ['feature', 'hotfix', 'release'],  # Can accept pushes
          'main': ['hotfix', 'release'],  # Can merge to main
          'release': ['develop', 'doc', 'documentation'],  # Can merge to release
          'develop': ['main', 'release', 'doc', 'documentation', 'feature']
        }

        BRANCHES_FEATUREVER = ['doc', 'documentation', 'feature']

        FATAL_INVALID_WORKFLOW = 1
        FATAL_INVALID_BASENAME = 2


        def set_logging():
            handler = logging.StreamHandler(sys.stdout)
            handler.setLevel(logging.ERROR)
            logger = logging.getLogger()
            logger.addHandler(handler)
            return logger


        def die_horribly(logger, head, exit_code, base='main'):
            messages = {
              FATAL_INVALID_WORKFLOW: f"may not push or may not merge to {base}",
              FATAL_INVALID_BASENAME: 'is not a valid base'
            }
            logger.fatal(f"git branch '{head}' {messages[exit_code]}")
            sys.exit(exit_code)

        logger = set_logging()

        head = os.getenv('HEAD')
        base = os.getenv('BASE')
        branch_type = head.split('/')[0]
        if branch_type not in BRANCHES_FEATUREVER:
            branch_type = head.split('-')[0]

        try:
            if branch_type not in VALID_WORKFLOWS[base]:
                die_horribly(logger, branch_type, FATAL_INVALID_WORKFLOW, base)
        except KeyError:
            die_horribly(logger, base, FATAL_INVALID_BASENAME)

